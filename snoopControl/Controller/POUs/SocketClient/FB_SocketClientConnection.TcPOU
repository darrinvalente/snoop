<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.6">
  <POU Name="FB_SocketClientConnection" Id="{8b5f95ae-f078-4941-81f7-6320f6eb3b27}" SpecialFunc="None">
    <Declaration><![CDATA[(* This function block implements simple TCP/IP client protocol. *)
FUNCTION_BLOCK FB_SocketClientConnection
VAR_IN_OUT
	fbTx 		: FB_FrameFifo;  (* TX fifo *)
	fbRx 		: FB_FrameFifo;  (* RX fifo *)
	fbLog		: FB_LogFifo;    (* Log message fifo *)
END_VAR

VAR_INPUT
	sSrvNetID	: T_AmsNetID	:= '';				(* TwinCAT TCP/IP server network address *)
	sRemoteHost	: T_IPv4Addr	:= '127.0.0.1';		(* Server network address *)
	nRemotePort	: UDINT			:= 200;				(* Remote server port *)
	bEnable		: BOOL			:= FALSE;			(* TRUE => Enable/connect, FALSE => Disable/disconnect *)
	tReconnect	: TIME 			:= T#10S;			(* Try to reconnect after this time *)
	bLog		: BOOL 			:= FALSE;			(* TRUE => Enable log message output, FALSE => Disable *)
	sPrefix		: STRING 		:= 'CLIENT::';		(* Log message description string (allows the identification of log message source) *)
END_VAR

VAR_OUTPUT
	eState		: E_SocketConnectionState := eSOCKET_DISCONNECTED;		(* TCP/IP connection state *)
END_VAR
VAR
	fbSocketConnect 	: FB_ClientServerConnection;					(* Create/release TCP/IP connection *)
	fbSocketSend		: FB_SocketSend;								(* Send TCP/IP data *)
	fbSocketReceive		: FB_SocketReceive;								(* Receive TCP/IP data *)
	
	nState 		: BYTE;													(* Global state *)
	bSndBusy 	: BOOL;													(* Tx state *)
	bRcvBusy 	: BOOL;													(* Rx state *)
	bDisconnect	: BOOL;													(* Disconnect flag, if set the socket will be closed *)

	fbReceivePollTimer	: TON;											(* Receive poll timer *)
	fbResponseTimer		: TON;											(* Response timeout timer *)
	fbReconnectTimer 	: TON;											(* Reconnect timer *)

	dBytesReceived		: UDINT;										(* Count of received data bytes *)
	dRxLength			: UDINT;										(* Byte length of received string *)
	buffer				: ARRAY[0..GVL.PLCPRJ_BUFFER_SIZE] OF BYTE;		(* Temp. RX buffer *)
	sRxFrame			: T_MaxString;
	sTxFrame			: T_MaxString;
	i					: UDINT;
	bAbort				: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE nState OF
	0:(* Connect *)
		fbSocketConnect( sSrvNetID 		:= sSrvNetID,
						nMode			:= SEL( bLog, 0, CONNECT_MODE_ENABLEDBG),(* Enable/disable debug messages? *)
						sRemoteHost 	:= sRemoteHost, nRemotePort := nRemotePort,
						bEnable			:= bEnable, tReconnect	:= tReconnect,
						eState			=> eState );
						
		IF NOT fbSocketConnect.bBusy THEN
			IF NOT fbSocketConnect.bError THEN
				IF eState = eSOCKET_CONNECTED THEN   (* We are connected *)
					
					fbTx.Clear( sPrefix := CONCAT( sPrefix, 'FB_FrameFifo(sender)::' ), bLog := bLog );(* Clear TX fifo (optional) *)
					fbRx.Clear( sPrefix := CONCAT( sPrefix, 'FB_FrameFifo(receiver)::' ), bLog := bLog );(* Clear RX fifo (optional) *)
					fbLog.Clear( sPrefix := sPrefix, bLog := bLog );(* Clear log fifo (optional) *)
					bSndBusy := FALSE;
					bRcvBusy := FALSE;
					bDisconnect := FALSE;
					dBytesReceived 	:= 0;

					fbReceivePollTimer( IN := FALSE, PT := T#0S );
					fbResponseTimer( IN := FALSE, PT := GVL.PLCPRJ_RECEIVE_TIMEOUT );
					fbReconnectTimer( IN := FALSE, PT := tReconnect );
				
					fbLog.Message( sMessage := 'Connection established!', hSocket := fbSocketConnect.hSocket );
					nState := 1;
				END_IF
			ELSE(* Connect error => log error *)
				fbLog.Error( sMessage := 'FB_ClientServerConnection()', nErrID := fbSocketConnect.nErrId );
			END_IF
		END_IF


	1:(* Data exchange state *)
		bDisconnect := NOT bEnable OR bDisconnect;(* User/internal disconnect requested? *)
		IF bDisconnect AND NOT bSndBusy AND NOT bRcvBusy THEN
			bDisconnect := FALSE;
			fbLog.Message( sMessage := 'Closing connection!', hSocket := fbSocketConnect.hSocket );
			nState := 2;(* Disconnect *)
		ELSE

			(* ------------------ Send tx data -------------------------------------- *)
			
			IF NOT bDisconnect AND NOT bSndBusy THEN
				fbTx.RemoveFromHead( sGet => sTxFrame );(* Remove oldest string entry *)
				IF fbTx.bOk THEN(* Success *)
					fbSocketSend( bExecute := FALSE );
					fbSocketSend(sSrvNetID 	:= sSrvNetID,
							hSocket		:= fbSocketConnect.hSocket,
							cbLen		:= INT_TO_UDINT(LEN( sTxFrame )) + 1,(* Send string inclusive string (null) delimiter! *)
							pSrc		:= ADR( sTxFrame ),(* Address of the string variable *)
							bExecute	:= TRUE );
					bSndBusy := TRUE;
				END_IF
			ELSE(* Wait until send not busy *)
				fbSocketSend( bExecute := FALSE );
				IF NOT fbSocketSend.bBusy THEN
					bSndBusy := FALSE;
					IF fbSocketSend.bError THEN(* Send error => log error and disconnect *)
						fbLog.Error( sMessage := 'FB_SocketSend()', nErrID := fbSocketSend.nErrId );
						bDisconnect := TRUE;(* Set flag *)
					END_IF
				END_IF
			END_IF  
			(* ---------------------------------------------------------------------- *)


			(* ---------------------- Get rx data ----------------------------------- *)
			IF NOT bDisconnect AND NOT bRcvBusy THEN
				
				fbReceivePollTimer( IN := TRUE );
				IF fbReceivePollTimer.Q THEN
					IF fbRx.cbFree >= SIZEOF(sRxFrame) THEN(* Check free rx fifo space *)
						fbReceivePollTimer( IN := FALSE, PT := GVL.PLCPRJ_RECEIVE_POLLING_TIME );
						fbSocketReceive( bExecute := FALSE );
						fbSocketReceive(sSrvNetId	:= sSrvNetID,
										hSocket		:= fbSocketConnect.hSocket,
										cbLen		:= SIZEOF(buffer) - dBytesReceived,
										pDest		:= ADR(buffer) + dBytesReceived,
										bExecute	:= TRUE );
						bRcvBusy := TRUE;
					END_IF
				END_IF
				
			ELSE(* Wait until receive not busy *)

				fbSocketReceive( bExecute := FALSE );
				IF NOT fbSocketReceive.bBusy THEN
					bRcvBusy := FALSE;
					IF NOT fbSocketReceive.bError THEN
						IF fbSocketReceive.nRecBytes > 0 THEN(* Bytes received *)
							
							fbReceivePollTimer( IN := FALSE, PT := T#0S );(* Bytes received => increase the read (polling) speed *)
							fbResponseTimer( IN := FALSE );(* Bytes received => disable timeout check *)
							dBytesReceived := dBytesReceived + fbSocketReceive.nRecBytes;(* Calculate the number of received data bytes *)

							(* Parse received bytes and extract strings *)
							REPEAT
								bAbort := TRUE;(* set flag *)
								IF dBytesReceived > 0 THEN

									(* Search for string null delimiter *)
									FOR i:= 0 TO dBytesReceived - 1 BY 1 DO
										IF buffer[i] = GVL.TERMINATION_CHAR_CODE THEN (* End of string position found *)

											dRxLength := i + 1;(* Calculate the length of string (inclusive the end delimiter) *)
											MEMCPY( ADR(sRxFrame), ADR(buffer), MIN(dRxLength, SIZEOF(sRxFrame) ) );(* Copy string bytes to temp string variable *)

											fbRx.AddToTail( sPut := sRxFrame );(* Add string to the rx fifo *)
											IF fbRx.bOk THEN
												MEMMOVE( ADR(buffer), ADR(buffer) + dRxLength, dBytesReceived - dRxLength );(* Move/shift remaining bytes in buffer *)
												dBytesReceived := dBytesReceived - dRxLength;(* Recalculate the remaining data length *)

												IF fbRx.cbFree >= SIZEOF(sRxFrame) THEN (* Check free rx buffer space *)
													bAbort := FALSE;(* Reset flag, try to parse the next string *)
												END_IF
											ELSE(* Fifo overflow => log error and disconnect *)
												fbLog.Error( sMessage := 'FB_FrameFifo(receiver)', nErrID := GVL.PLCPRJ_ERROR_RECFIFO_OVERFLOW );
												bDisconnect := TRUE;(* set flag *)
												RETURN;
											END_IF

											EXIT;
										END_IF
									END_FOR

								END_IF (* IF cbReceived > 0 THEN *)

							UNTIL bAbort
							END_REPEAT

						ELSE(* No bytes received *)
							fbResponseTimer( IN := TRUE );(* No bytes received => enable timeout check *)
							IF fbResponseTimer.Q THEN (* Timeout error*)
								fbResponseTimer( IN := FALSE );
								fbLog.Error( sMessage := 'FB_SocketReceive()', nErrID := GVL.PLCPRJ_ERROR_RECEIVE_TIMEOUT );
								bDisconnect := TRUE;(* Set flag *)
							END_IF							
						END_IF(* IF fbReceive.nRecBytes > 0 THEN *)
					ELSE(* Receive error => log error and disconnect *)
						fbLog.Error( sMessage := 'FB_SocketReceive()', nErrID := fbSocketReceive.nErrId );
						bDisconnect := TRUE;(* set flag *)
					END_IF
					
				END_IF(* IF NOT fbReceive.bBusy THEN *) 
	
			END_IF(* IF NOT bDisconnect AND NOT bRcvBusy THEN *)
			(* ---------------------------------------------------------------------- *)
			

		END_IF(* IF bDisconnect AND NOT bSndBusy AND NOT bRcvBusy THEN *)


	2:(* Disconnect *)
		fbSocketConnect( bEnable:= FALSE, eState=>eState );
		IF eState = eSOCKET_DISCONNECTED THEN
			fbReconnectTimer( IN := TRUE );(* Please wait some seconds and then try to connect again *)
			IF fbReconnectTimer.Q THEN
				fbReconnectTimer( IN := FALSE );
				nState := 0;
			END_IF
		END_IF

END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>